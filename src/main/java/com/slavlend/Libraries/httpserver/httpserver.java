package com.slavlend.Libraries.httpserver;

import com.slavlend.Polar.PolarObject;
import com.slavlend.Polar.PolarValue;
import com.slavlend.Polar.Stack.Storage;
import com.slavlend.Colors;
import com.slavlend.Logger.PolarLogger;
import com.slavlend.Libraries.json;
import com.slavlend.Parser.Statements.FunctionStatement;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/*
–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
http-—Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤—Ä–∞–ø–ø–µ—Ä –≤–æ–∫—Ä—É–≥
–ø—Ä–æ—Å—Ç–æ http-—Å–µ—Ä–≤–µ—Ä–∞.
 */
public class httpserver {
    // —Ö—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
    private final Map<String, FunctionStatement> requestHandlerList = new HashMap<>();
    // json
    private final json json = new json();

    // –ø–æ–º–µ—â–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–∞
    public void route(PolarValue path, PolarValue func) {
        if (func.isFunc()) {
            requestHandlerList.put(path.asString(), func.asFunc());
        }
        else {
            PolarLogger.Crash("Http Server Error. Not A Function: ", func.instantiateAddress);
        }
    }

    // —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    public void setup(int port) {
        // –ø–æ—Ç–æ–∫
        Thread thread = new Thread() {
            @Override
            public void run() {
                // —Å—Ç—ç–∫
                Storage.getInstance().threadInit();
                // —Å–µ—Ä–≤–µ—Ä
                try (ServerSocket serverSocket = new ServerSocket(port)) {
                    // –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
                    System.out.println(Colors.ANSI_GREEN + "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ");
                    System.out.println("‚îÇ üõ∏ Server Started at: " + String.valueOf(serverSocket.getInetAddress().toString()) + ":" + String.valueOf(serverSocket.getLocalPort()));
                    System.out.println("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ" + Colors.ANSI_RESET);
                    // –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    while (true) {
                        Socket clientSocket = serverSocket.accept();
                        startServer(clientSocket);
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        };

        // –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        thread.start();
    }

    private void startServer(Socket clientSocket) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
             PrintWriter writer = new PrintWriter(clientSocket.getOutputStream())) {

            String requestLine = reader.readLine();
            if (requestLine == null) return;

            String[] parts = requestLine.split(" ");
            String method = parts[0];
            String path = parts[1];

            Request request = new Request(path, method);
            FunctionStatement handler = requestHandlerList.get(path);

            // –ß—Ç–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            Map<String, String> headers = new HashMap<>();
            String line;
            while ((line = reader.readLine()) != null && !line.isEmpty()) {
                String[] headerParts = line.split(": ", 2);
                if (headerParts.length == 2) {
                    headers.put(headerParts[0], headerParts[1]);
                }
            }

            // –ß—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            StringBuilder bodyBuilder = new StringBuilder();
            if ("POST".equalsIgnoreCase(method)) {
                String contentLengthHeader = headers.get("Content-Length");
                if (contentLengthHeader != null) {
                    int contentLength = Integer.parseInt(contentLengthHeader);
                    char[] bodyChars = new char[contentLength];
                    reader.read(bodyChars, 0, contentLength);
                    bodyBuilder.append(bodyChars);
                }
            }

            if (handler != null) {
                ArrayList<PolarValue> parameters = new ArrayList<>();
                String _json = "{'method': '" + method + "'," + "'request':'" + bodyBuilder + "'}";
                parameters.add(json.read(new PolarValue(_json)));
                PolarObject _response = handler.call(null, parameters).asObject();
                Response response = new Response(_response.classValues.get("code").asNumber().intValue(), _response.classValues.get("body").asString());
                writer.println("HTTP/1.1 " + response.getCode() + " OK");
                writer.println("Content-Type: text/plain");
                writer.println("Content-Length: " + response.getBody().length());
                writer.println();
                writer.println(response.getBody());
            } else {
                writer.println("HTTP/1.1 404 Not Found");
                writer.println("Content-Length: 0");
                writer.println();
            }

            writer.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
