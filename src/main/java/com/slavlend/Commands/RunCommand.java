package com.slavlend.Commands;

import com.slavlend.Colors;
import com.slavlend.Executor.Executor;
import com.slavlend.Executor.ExecutorSettings;

import java.io.File;
import java.util.Scanner;

// –∫–æ–º–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞
public class RunCommand implements Command {
    @Override
    public void execute(String[] args) {
        // –≤–≤–æ–¥–∏–º —Ñ–∞–π–ª –Ω—ç–π–º –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        // System.out.println("ü™∂ Enter File Name: ");
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if (args.length != 1) {
            System.out.println(
                    "üõ∏ Error! Invalid args amount. (Expected:1,Founded:"
                            +String.valueOf(args.length) + ")"
            );
            return;
        }
        // –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        String filePath = args[0];

        // —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        File file = null;
        StringBuilder code = null;
        Scanner sc = null;
        try {
            file = new File(filePath);
            code = new StringBuilder();
            sc = new Scanner(file);
        } catch (Exception e) {
            System.out.println("üëΩ Invalid file: " + filePath);
            return;
        }

        // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        System.out.println();

        // –ø–∞—Ä—Å–∏–º –Ω–∞ –∫–æ–¥ –ª–∞–π–Ω—ã
        while (sc.hasNextLine()) {
            code.append(sc.nextLine()).append("\n");
        }

        // —ç–∫–∑–µ–∫—å—é—Ç–∏–º
        Executor.exec(new ExecutorSettings(
                filePath,
                code.toString()
        ));

        // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        System.out.println();

        // –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        // System.out.println(Colors.ANSI_YELLOW + "üí° Program was finished!" + Colors.ANSI_RESET);
    }
}
