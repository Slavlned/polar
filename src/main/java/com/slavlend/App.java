package com.slavlend;

import com.slavlend.Executor.Executor;
import com.slavlend.Executor.ExecutorSettings;
import com.slavlend.Parser.Parser;
import com.slavlend.Ver.PolarVersion;

import java.io.File;
import java.util.Scanner;

/*
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
 */
public class App 
{
    // –ø–∞—Ä—Å–µ—Ä
    public static Parser parser;

    /*
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    public static void main(String[] args) {
        // –∑–∞–≥–æ–ª–æ–≤–æ—á–µ–∫
        System.out.println("‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ");
        System.out.println("‚îÇ üêª‚Äç‚ùÑÔ∏è Polar v" + PolarVersion.build);
        System.out.println("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ");
        System.out.println();
        String currentDir = System.getProperty("user.dir");
        System.out.println("‚ùÑÔ∏è Current dir: " + currentDir);
        System.out.println();
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if (args.length == 0) {
            System.out.println("ü¶© Arguments is empty");
        }
        else {
            // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
            File file;
            StringBuilder code;
            Scanner sc;
            try {
                file = new File(args[0]);
                code = new StringBuilder();
                sc = new Scanner(file);
            } catch (Exception e) {
                System.out.println("üëΩ Invalid file: " + args[0]);
                return;
            }

            // –ø–∞—Ä—Å–∏–º –Ω–∞ –∫–æ–¥ –ª–∏–Ω–∏–∏
            while (sc.hasNextLine()) {
                String line = sc.nextLine();
                code.append(line).append("\n");
            }
            sc.close();

            // –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ç–¥
            boolean debugMode = false;
            if (args.length > 1) {
                if (args[1].equals("--debug")) {
                    debugMode = true;
                }
            }

            // –∏—Å–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –Ω–∞ VM
            Executor.exec(
                    new ExecutorSettings(args[0], code.toString(), debugMode)
            );
        }
    }
}

