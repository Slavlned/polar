package com.slavlend.Vm;

import com.slavlend.Colors;
import lombok.Getter;
import lombok.Setter;

import java.util.Stack;

/*
–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ ICE
 */
@SuppressWarnings("unused")
@Getter
public class IceVm {
    // —Å—Ç–µ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    private final ThreadLocal<Stack<Object>> stack = new ThreadLocal<>();
    // —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    private final VmFrame<String, Object> variables = new VmFrame<>();
    private final VmFrame<String, VmFunction> functions = new VmFrame<>();
    private final VmFrame<String, VmClass> classes = new VmFrame<>();
    private final VmFrame<String, VmCoreFunction> coreFunctions = new VmFrame<>();
    // —Ä—ç–π—Å –æ—à–∏–±–æ–∫
    @Setter
    public static VmErrRaiser raiser = new VmErrRaiser();
    // –ª–æ–≥–≥–µ—Ä
    @Setter
    public static VmErrLogger logger;
    // –∞–¥—Ä–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞
    private final ThreadLocal<Object> returnAddress = new ThreadLocal<>();

    /**
     * –ü–æ–º–µ—â–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞–¥—Ä–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞
     */
    public void ret(Object o) {
        returnAddress.set(o);
    }

    /**
     *
     * @param code - –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
     *             –∫–æ–¥–∞ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
     */
    public void run(VmCode code, boolean isDebugMode) {
        // –∑–∞–ø—É—Å–∫
        try {
            // –≤—ã–≤–æ–¥–∏–º –±–∞–π—Ç–∫–æ–¥ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–º)
            if (isDebugMode) {
                printByteCode(code);
            }
            // –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
            VmBenchmark benchmark = new VmBenchmark();
            benchmark.start();
            // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞
            initStackForThread();
            // –∏—Å–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            for (VmInstr instr : code.getInstructions()) {
                instr.run(this, variables);
            }
            // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ –∏
            // –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            System.out.println();
            System.out.println(
                    Colors.ANSI_BLUE + "üßä Exec time: " + benchmark.end() + "ms, stack size: "
                            + stack.get().size() + "(" + stack.get().toString() + ")" + Colors.ANSI_RESET
            );
        } catch (VmException exception) {
            logger.error(exception.getAddr(), exception.getMessage());
        } catch (RuntimeException exception) {
            logger.error(new VmInAddr(-1), "java exception (" + exception.getMessage() + ")", exception);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞ –ø–æ–¥ –ø–æ—Ç–æ–∫
     */
    public void initStackForThread() {
        stack.set(new Stack<>());
    }

    /**
     *
     * @param code - –∫–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞
     *             –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    private void printByteCode(VmCode code) {
        System.out.println(Colors.ANSI_BLUE + "üõû Bytecode:" + Colors.ANSI_RESET);
        printCode(code);
        System.out.println();
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
     * @param code - –∫–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞
     *             –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    private void printCode(VmCode code) {
        // –≤—ã–≤–æ–¥–∏–º –∫–ª–∞—Å—Å—ã
        for (VmClass clazz : classes.getValues().values()) {
            clazz.print();
        }
        // –≤—ã–≤–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏
        for (VmFunction function : functions.getValues().values()) {
            function.print();
        }
        // –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        for (VmInstr instr : code.getInstructions()) {
            instr.print();
        }
    }

    /**
     * –ü—É—à–∏—Ç –≤ —Å—Ç–µ–∫ –æ–±—ä–µ–∫—Ç
     * @param val - –æ–±—ä–µ–∫—Ç, –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è –≤ —Å—Ç–µ–∫
     */
    public void push(Object val) {
        stack().push(val);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç —Å –≤–µ—Ä—Ö—É—à–∫–∏ —Å—Ç–µ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ
     * @return - –æ—Ç–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å –≤–µ—Ä—Ö—É—à–∫–∏ —Å—Ç–µ–∫–∞
     */
    public Object pop(VmInAddr addr) {
        // if (stack().empty()) {
            // raiser.error(addr, "stack is empty here (did you forgot back statement?)");
        // }
        return stack().pop();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Å—Ç–µ–∫
     * @param frame - —Ñ—Ä–µ–π–º, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
     * @param name - –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    public void load(VmInAddr addr, VmFrame<String, Object> frame, String name) {
        stack().push(frame.lookup(addr, name));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–µ–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
     * @return - —Å—Ç—ç–∫
     */
    public Stack<Object> stack() {
        return getStack().get();
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
     * @param name - –∏–º—è –¥–ª—è –≤—ã–∑–æ–≤–∞
     */
    public void callGlobal(VmInAddr addr, String name, boolean shouldPushResult) {
        if (functions.getValues().containsKey(name)) {
            functions.lookup(addr, name).exec(this, shouldPushResult);
        } else if (variables.getValues().containsKey(name)){
            ((VmFunction)variables.lookup(addr, name)).exec(this, shouldPushResult);
        } else {
            Object res = coreFunctions.lookup(addr, name).exec(addr);
            if (res != null) {
                push(res);
            }
        }
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –ª–∏ —ç—Ç–æ - –∏–∑ —è–¥—Ä–∞
     * @param name - –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
     * @return –¥–∞ –∏–ª–∏ –Ω–µ—Ç
     */
    public boolean isCoreFunc(String name) {
        return coreFunctions.has(name);
    }
}
